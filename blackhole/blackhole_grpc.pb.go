// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: blackhole.proto

package blackhole

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlackHoleClient is the client API for BlackHole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackHoleClient interface {
	ConsumeAll(ctx context.Context, opts ...grpc.CallOption) (BlackHole_ConsumeAllClient, error)
	EmitRandom(ctx context.Context, in *StreamSize, opts ...grpc.CallOption) (BlackHole_EmitRandomClient, error)
	EmitZeros(ctx context.Context, in *StreamSize, opts ...grpc.CallOption) (BlackHole_EmitZerosClient, error)
}

type blackHoleClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackHoleClient(cc grpc.ClientConnInterface) BlackHoleClient {
	return &blackHoleClient{cc}
}

func (c *blackHoleClient) ConsumeAll(ctx context.Context, opts ...grpc.CallOption) (BlackHole_ConsumeAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlackHole_ServiceDesc.Streams[0], "/blackhole.BlackHole/ConsumeAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &blackHoleConsumeAllClient{stream}
	return x, nil
}

type BlackHole_ConsumeAllClient interface {
	Send(*Bytes) error
	CloseAndRecv() (*ByteCount, error)
	grpc.ClientStream
}

type blackHoleConsumeAllClient struct {
	grpc.ClientStream
}

func (x *blackHoleConsumeAllClient) Send(m *Bytes) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blackHoleConsumeAllClient) CloseAndRecv() (*ByteCount, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ByteCount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blackHoleClient) EmitRandom(ctx context.Context, in *StreamSize, opts ...grpc.CallOption) (BlackHole_EmitRandomClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlackHole_ServiceDesc.Streams[1], "/blackhole.BlackHole/EmitRandom", opts...)
	if err != nil {
		return nil, err
	}
	x := &blackHoleEmitRandomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlackHole_EmitRandomClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type blackHoleEmitRandomClient struct {
	grpc.ClientStream
}

func (x *blackHoleEmitRandomClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blackHoleClient) EmitZeros(ctx context.Context, in *StreamSize, opts ...grpc.CallOption) (BlackHole_EmitZerosClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlackHole_ServiceDesc.Streams[2], "/blackhole.BlackHole/EmitZeros", opts...)
	if err != nil {
		return nil, err
	}
	x := &blackHoleEmitZerosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlackHole_EmitZerosClient interface {
	Recv() (*Bytes, error)
	grpc.ClientStream
}

type blackHoleEmitZerosClient struct {
	grpc.ClientStream
}

func (x *blackHoleEmitZerosClient) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlackHoleServer is the server API for BlackHole service.
// All implementations must embed UnimplementedBlackHoleServer
// for forward compatibility
type BlackHoleServer interface {
	ConsumeAll(BlackHole_ConsumeAllServer) error
	EmitRandom(*StreamSize, BlackHole_EmitRandomServer) error
	EmitZeros(*StreamSize, BlackHole_EmitZerosServer) error
	mustEmbedUnimplementedBlackHoleServer()
}

// UnimplementedBlackHoleServer must be embedded to have forward compatible implementations.
type UnimplementedBlackHoleServer struct {
}

func (UnimplementedBlackHoleServer) ConsumeAll(BlackHole_ConsumeAllServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeAll not implemented")
}
func (UnimplementedBlackHoleServer) EmitRandom(*StreamSize, BlackHole_EmitRandomServer) error {
	return status.Errorf(codes.Unimplemented, "method EmitRandom not implemented")
}
func (UnimplementedBlackHoleServer) EmitZeros(*StreamSize, BlackHole_EmitZerosServer) error {
	return status.Errorf(codes.Unimplemented, "method EmitZeros not implemented")
}
func (UnimplementedBlackHoleServer) mustEmbedUnimplementedBlackHoleServer() {}

// UnsafeBlackHoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackHoleServer will
// result in compilation errors.
type UnsafeBlackHoleServer interface {
	mustEmbedUnimplementedBlackHoleServer()
}

func RegisterBlackHoleServer(s grpc.ServiceRegistrar, srv BlackHoleServer) {
	s.RegisterService(&BlackHole_ServiceDesc, srv)
}

func _BlackHole_ConsumeAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlackHoleServer).ConsumeAll(&blackHoleConsumeAllServer{stream})
}

type BlackHole_ConsumeAllServer interface {
	SendAndClose(*ByteCount) error
	Recv() (*Bytes, error)
	grpc.ServerStream
}

type blackHoleConsumeAllServer struct {
	grpc.ServerStream
}

func (x *blackHoleConsumeAllServer) SendAndClose(m *ByteCount) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blackHoleConsumeAllServer) Recv() (*Bytes, error) {
	m := new(Bytes)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlackHole_EmitRandom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSize)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlackHoleServer).EmitRandom(m, &blackHoleEmitRandomServer{stream})
}

type BlackHole_EmitRandomServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type blackHoleEmitRandomServer struct {
	grpc.ServerStream
}

func (x *blackHoleEmitRandomServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

func _BlackHole_EmitZeros_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSize)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlackHoleServer).EmitZeros(m, &blackHoleEmitZerosServer{stream})
}

type BlackHole_EmitZerosServer interface {
	Send(*Bytes) error
	grpc.ServerStream
}

type blackHoleEmitZerosServer struct {
	grpc.ServerStream
}

func (x *blackHoleEmitZerosServer) Send(m *Bytes) error {
	return x.ServerStream.SendMsg(m)
}

// BlackHole_ServiceDesc is the grpc.ServiceDesc for BlackHole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlackHole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blackhole.BlackHole",
	HandlerType: (*BlackHoleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeAll",
			Handler:       _BlackHole_ConsumeAll_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EmitRandom",
			Handler:       _BlackHole_EmitRandom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EmitZeros",
			Handler:       _BlackHole_EmitZeros_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blackhole.proto",
}
